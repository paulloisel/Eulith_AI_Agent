Learn the information from the following list of methods. For each method, we give information on:
1. the object or instance on which it should be called
2. the arguments the method takes
3. the output of the method
4. a quick description of what the method does
5. the list of the steps in which it can be used.

eulith_get_erc_token() 
1. Called on the Eulith Web3 object (conventional variable name "ew3")
2. Takes 1 argument: TokenSymbol (available TokenSymbol is here: https://docs.eulith.com/v/hgbRx2t48xMLL5xhyh04/client-libraries/python/tokens). 
3. Outputs an instance of EulithERC20 or EulithWETH class (the conventional variable name depends of the requested TokenSymbol). Usually, the variable is just a lowercase of the TokenSymbol. However, "weth" is used in all the examples.
    For example:
    weth = ew3.eulith_get_erc_token(TokenSymbol.WETH)
    usdt = ew3.eulith_get_erc_token(TokenSymbol.USDT)
    usdc = ew3.eulith_get_erc_token(TokenSymbol.USDC)
4. We need this type of instance because the DEXs recognize only ERC-20 tokens.
5. It can be used in 1 step:
- Step 3: Define transaction's tokens and amount.

get_balance() 
1. Called on the eth class of the Eulith Web3 object (conventional variable name "ew3.eth").
2. Takes 1 argument: the address variable of a LocalSigner object with your wallet signature (conventional variable name "wallet.address").
3. Outputs the balance of the wallet.
4. Use this method to check if you have enough funds for the transaction (usually in a if-statement). The declaration of the "eth" class can be found in the main.py file, this class enables access to EulithWeb3 methods and handle gas prices in ETH.
5. It can be used in 1 step:
- Step 4: Check wallet's funds' availability.

ensure_toolkit_contract()
1. Called on the "v0" class of an instance of EulithERC20 or EulithWETH class (conventional variable name "weth.v0").
2. Takes 1 argument: the address variable of a LocalSigner object with your wallet signature (conventional variable name "wallet.address").
3. Outputs the address of the toolkit contract on a hexadecimal format (conventional variable name "toolkit_address").
4. Before outputting the address, it checks if a toolkit contract already exists for this wallet, if not, it creates a new one. Hexadecimal format is used for blockchain operations because it is easy to encode and decode.
5. It can be used in 1 step:
- Step 5: Call and check funds availability in Eulith toolkit.

balance_of_float()
1. Called on the instance of EulithERC20 or EulithWETH class (conventional variable name "weth").
2. Takes 1 argument: the address of the toolkit contract on a hexadecimal format (conventional variable name "toolkit_address").
3. Outputs the balance of the toolkit contract as a float.
4. Use this method to check if you have enough funds for the transaction (usually in a if-statement). 
5. It can be used in 1 step:
- Step 5: Call and check funds availability in Eulith toolkit.

deposit_eth()
1. Called on the instance of EulithERC20 or EulithWETH class (conventional variable name "weth").
2. Takes 2 arguments:
- first: the amount of eth you want to deposit
- second: the following plural parameter: {'from': wallet.address, 'gas': (an integer, the amount of gas you are ready to pay)}
3. Outputs the reference of the transaction to realize (conventional variable name "deposit_tx").
4.This method prepares the transactions by setting the amount, the sender wallet and the accepted gas fees.
5. It can be used in 1 step:
- Step 5: Call and check funds availability in Eulith toolkit.

send_transaction()
1. Called on the eth class of the Eulith Web3 object (conventional variable name "ew3.eth").
2. Takes 1 argument: several parameters that can be pre-defined in a reference of the transaction to realize (for example conventional variable name "deposit_tx"), or defined as follow: {'from': wallet.address, 'to': variable to the key of the receiver wallet as a str, 'value': hex(int(t1_send_amount * 1e18))}.
3. Outputs the response from the Eulith API about the transaction (conventional variable name "transfer_hash").
4. This method is sending data to the network, it can be used when sending tokens to the toolkit to reach the necessary amount for the transaction (step 5 of Eulith protocols, in this case it outputs "transfer_hash", the actual reference of the transfer) or when the bundle is already opened to append the transaction to the atomic transaction (step 6 of Eulith protocols, in this case if it is unsuccessful, an error should be raised), or to send the entire transaction when the bundle has been closed (Step 8), or to withdraw the funds from the toolkit (Step 9).
5. It can be used in 2 steps:
- Step 5: Call and check funds availability in Eulith toolkit.
- Step 6: Open the atomic bundle
- Step 8: Perform transaction
- Step 9: Empty remaining balance.

transfer_float()
1. Called on the instance of EulithERC20 or EulithWETH class (conventional variable name "weth").
2. Takes 3 arguments:
- first: the address of the toolkit contract on a hexadecimal format (conventional variable name "toolkit_address")
- second: the amount of weth you want to transfer to the toolkit
- third: the following plural parameter: {'from': wallet.address, 'gas': (an integer, the amount of gas you are ready to pay)}
3. Outputs the reference of the transfer to realize to the toolkit (conventional variable name "transfer_to_toolkit_contract").
4. The reference output "transfer_to_toolkit_contract" is passed in the send_transaction() method to obtain the "transfer_hash" reference, the actual reference of the transfer.
5. It can be used in 1 step:
- Step 5: Call and check funds availability in Eulith toolkit.

wait_for_transaction_receipt()
1. Called on the eth class of the Eulith Web3 object (conventional variable name "ew3.eth").
2. Takes 1 argument: the response from the Eulith API about the transaction, the "transfer_hash" reference, the actual reference of the transfer from the send_transaction() method.
3. Outputs the receipt of the transaction or entire atomic transaction (conventional variable name "receipt").
4. By printing the output you can save the receipt of the transaction.
5. It can be used in 2 steps:
- Step 5: Call and check funds availability in Eulith toolkit.
- Step 8: Perform transaction.

start_atomic_transaction()
1. Called on the "v0" class of an instance of EulithERC20 or EulithWETH class (conventional variable name "weth.v0").
2. Takes 1 argument: the address variable of a LocalSigner object with your wallet signature (conventional variable name "wallet.address").
3. Outputs nothing.
4. This method begins an atomic transaction by opening a bundle with your wallet as the authorized address.
5. It can be used in 1 step:
- Step 6: Open the atomic bundle.

commit_atomic_transaction()
1. Called on the "v0" class of an instance of EulithERC20 or EulithWETH class (conventional variable name "weth.v0").
2. Takes 0 argument.
3. Outputs the parameters of the committed transaction (conventional variable name "atomic_tx").
4. This method closes the bundle of an atomic transaction (step 7 of Eulith protocols) and holds the information about this transaction. The output should be passed in the send_transaction() method so that the entire atomic transaction is executed (if it fails, it should raise an error 'Failed to commit atomic transaction').
5. It can be used in 1 step:
- Step 7: Close bundle.

transfer_from_float()
1. Called on the instance of EulithERC20 or EulithWETH class (conventional variable name "weth").
2. Takes 4 arguments:
- first: the address of the toolkit contract on a hexadecimal format (conventional variable name "toolkit_address")
- second: the address variable of a LocalSigner object with your wallet signature (conventional variable name "wallet.address")
- third: the amount of weth you want to transfer to the toolkit
- fourth: the following plural parameter: {'from': wallet.address, 'gas': (an integer, the amount of gas you are ready to pay)}
3. Outputs the reference of the transaction to realize (conventional variable name "withdraw_weth_from_toolkit_tx").
4. This is the exact opposite operation than when you deposit weth in step 5.
5. It can be used in 1 step:
- Step 9: Empty remaining balance.